// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;

//float[] oldValues;
//float[] weights;
int inValuesAmount;
int outValuesAmount;
int batchSize;

RWBuffer<float> inValuesMatrix;
RWBuffer<float> weights;
RWBuffer<float> biases;

RWBuffer<float> outValuesMatrix;
RWBuffer<float> derivativesMatrix;

[numthreads(10, 10, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int a = id.x * inValuesAmount;
    int b = id.y * inValuesAmount;
    float newValue = 0;
    for (int i = 0; i < inValuesAmount; i++)
    {
        newValue += inValuesMatrix[i + b] * weights[i + a];
    }
    float tanValue = tanh(newValue);
    outValues[id.x + outValuesAmount * id.y] = tanValue;
    derivatives[id.x + outValuesAmount * id.y] = 1 - tanValue * tanValue;
    
    // TODO: insert actual code here!
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
