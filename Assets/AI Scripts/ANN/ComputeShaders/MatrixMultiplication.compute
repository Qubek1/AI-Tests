// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;

//float[] oldValues;
//float[] weights;
int oldValuesAmount;
int newValuesAmount;

RWBuffer<float> inValues;
RWBuffer<float> weights;
RWBuffer<float> biases;

//float myArray[1000];

RWBuffer<float> outValues;
RWBuffer<float> derivatives;

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float newValue = biases[id.x];
    int a = id.x * inValuesAmount;

    for (int i = 0; i < inValuesAmount; i++)
    {
        newValue += inValues[i] * weights[i + a];
    }
    float tanValue = tanh(newValue);
    outValues[id.x] = tanValue;
    derivatives[id.x] = 1 - tanValue * tanValue;
    // TODO: insert actual code here!
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
